"""mf_triggers

Revision ID: 075d344ae2cc
Revises: 427db8f31999
Create Date: 2024-09-13 13:12:16.951311

"""

from alembic import op
import os

# revision identifiers, used by Alembic.
revision = '075d344ae2cc'
down_revision = '427db8f31999'
branch_labels = None
depends_on = None

ENVNAME = os.getenv('envname', 'local')


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    SQL_ORG_TRIGGER_DEF = """
        CREATE OR REPLACE FUNCTION org_delete_trigger_function()
        RETURNS TRIGGER AS $$
        BEGIN
            -- Delete from attached_metadata_form
            DELETE FROM {SCHEMA_NAME}.attached_metadata_form 
            WHERE "entityUri" = OLD."organizationUri" 
              AND "entityType" = 'Organization';
         
            -- Delete from metadata_form
            DELETE FROM {SCHEMA_NAME}.metadata_form 
            WHERE "homeEntity" = OLD."organizationUri" 
              AND visibility = 'Organization-Wide';
         
            RETURN OLD;
        END;
        $$ LANGUAGE plpgsql;
        """.format(SCHEMA_NAME=ENVNAME)

    SQL_ORG_TRIGGER_CREATE = """
        CREATE TRIGGER org_delete_trigger
        BEFORE DELETE ON {SCHEMA_NAME}.organization
        FOR EACH ROW
        EXECUTE FUNCTION org_delete_trigger_function();
        """.format(SCHEMA_NAME=ENVNAME)

    op.execute(SQL_ORG_TRIGGER_DEF)  # nosemgrep
    op.execute(SQL_ORG_TRIGGER_CREATE)  # nosemgrep

    SQL_ENV_TRIGGER_DEF = """CREATE OR REPLACE FUNCTION env_delete_trigger_function()
        RETURNS TRIGGER AS $$
        BEGIN
            -- Delete from attached_metadata_form
            DELETE FROM {SCHEMA_NAME}.attached_metadata_form
            WHERE "entityUri" = OLD."environmentUri"
              AND "entityType" = 'Environment';

            -- Delete from metadata_form
            DELETE FROM {SCHEMA_NAME}.metadata_form
            WHERE "homeEntity" = OLD."environmentUri"
              AND visibility = 'Environment-Wide';

            RETURN OLD;
        END;
        $$ LANGUAGE plpgsql;""".format(SCHEMA_NAME=ENVNAME)

    SQL_ENV_TRIGGER_CREATE = """
        CREATE TRIGGER env_delete_trigger
        BEFORE DELETE ON {SCHEMA_NAME}.environment
        FOR EACH ROW
        EXECUTE FUNCTION env_delete_trigger_function();
        """.format(SCHEMA_NAME=ENVNAME)

    op.execute(SQL_ENV_TRIGGER_DEF)  # nosemgrep
    op.execute(SQL_ENV_TRIGGER_CREATE)  # nosemgrep

    SQL_DATASET_TRIGGER_DEF = """
            CREATE OR REPLACE FUNCTION dataset_delete_trigger_function()
        RETURNS TRIGGER AS $$
        BEGIN
            -- Delete from attached_metadata_form
            DELETE FROM {SCHEMA_NAME}.attached_metadata_form
            WHERE "entityUri" = OLD."datasetUri"
              AND "entityType" = 'Dataset';

            RETURN OLD;
        END;
        $$ LANGUAGE plpgsql;""".format(SCHEMA_NAME=ENVNAME)

    SQL_DATASET_TRIGGER_CREATE = """        
    CREATE TRIGGER dataset_delete_trigger
        BEFORE DELETE ON {SCHEMA_NAME}.dataset
        FOR EACH ROW
        EXECUTE FUNCTION dataset_delete_trigger_function();""".format(SCHEMA_NAME=ENVNAME)

    op.execute(SQL_DATASET_TRIGGER_DEF)  # nosemgrep
    op.execute(SQL_DATASET_TRIGGER_CREATE)  # nosemgrep

    SQL_RESOURCE_TRIGGER_DEF = """
        CREATE OR REPLACE FUNCTION metadata_form_delete_trigger_function()
        RETURNS TRIGGER AS $$
        BEGIN
            -- Delete from resource_permission_policy
            DELETE FROM {SCHEMA_NAME}.resource_policy_permission
            WHERE "sid" in (SELECT sid from {SCHEMA_NAME}.resource_policy where "resourceUri"=OLD.uri and "resourceType"='MetadataForm');
            DELETE FROM {SCHEMA_NAME}.resource_policy where "resourceUri"=OLD.uri;
            RETURN OLD;
        END;
        $$ LANGUAGE plpgsql;""".format(SCHEMA_NAME=ENVNAME)

    SQL_RESOURCE_TRIGGER_CREATE = """
        CREATE TRIGGER metadata_form_delete_trigger
        BEFORE DELETE ON {SCHEMA_NAME}.metadata_form
        FOR EACH ROW
        EXECUTE FUNCTION metadata_form_delete_trigger_function();""".format(SCHEMA_NAME=ENVNAME)

    op.execute(SQL_RESOURCE_TRIGGER_DEF)  # nosemgrep
    op.execute(SQL_RESOURCE_TRIGGER_CREATE)  # nosemgrep
    # # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        """
        -- Drop the org_delete_trigger
        DROP TRIGGER IF EXISTS org_delete_trigger ON organization;
        
        -- Drop the org_delete_trigger_function
        DROP FUNCTION IF EXISTS org_delete_trigger_function;
        """
    )

    op.execute(
        """
        -- Drop the env_delete_trigger
        DROP TRIGGER IF EXISTS env_delete_trigger ON environment;
        
        -- Drop the env_delete_trigger_function
        DROP FUNCTION IF EXISTS env_delete_trigger_function;
        """
    )

    op.execute(
        """
        -- Drop the dataset_delete_trigger
        DROP TRIGGER IF EXISTS dataset_delete_trigger ON dataset;
        
        -- Drop the dataset_delete_trigger_function
        DROP FUNCTION IF EXISTS dataset_delete_trigger_function;
        """
    )

    op.execute(
        """
        -- Drop the dataset_delete_trigger
        DROP TRIGGER IF EXISTS metadata_form_delete_trigger ON metadata_form;
        
        -- Drop the dataset_delete_trigger_function
        DROP FUNCTION IF EXISTS metadata_form_delete_trigger_function;
        """
    )
    # ### end Alembic commands ###
