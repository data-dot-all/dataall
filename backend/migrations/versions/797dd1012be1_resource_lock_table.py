"""resource_lock_table

Revision ID: 797dd1012be1
Revises: 18da23d3ba44
Create Date: 2024-06-17 19:06:51.569471

"""

from alembic import op
from sqlalchemy import orm, Column, String, Boolean, ForeignKey
import sqlalchemy as sa
from typing import Optional, List
from sqlalchemy.ext.declarative import declarative_base
from dataall.base.db import utils

# revision identifiers, used by Alembic.
revision = '797dd1012be1'
down_revision = '18da23d3ba44'
branch_labels = None
depends_on = None

Base = declarative_base()


class ResourceLock(Base):
    __tablename__ = 'resource_lock'

    resourceUri = Column(String, nullable=False, primary_key=True)
    resourceType = Column(String, nullable=False, primary_key=True)
    acquiredByUri = Column(String, nullable=True)
    acquiredByType = Column(String, nullable=True)

    def __init__(
        self,
        resourceUri: str,
        resourceType: str,
        acquiredByUri: Optional[str] = None,
        acquiredByType: Optional[str] = None,
    ):
        self.resourceUri = resourceUri
        self.resourceType = resourceType
        self.acquiredByUri = acquiredByUri
        self.acquiredByType = acquiredByType


class DatasetBase(Base):
    __tablename__ = 'dataset'
    environmentUri = Column(String, ForeignKey('environment.environmentUri'), nullable=False)
    organizationUri = Column(String, nullable=False)
    datasetUri = Column(String, primary_key=True, default=utils.uuid('dataset'))


class S3Dataset(DatasetBase):
    __tablename__ = 's3_dataset'
    datasetUri = Column(String, ForeignKey('dataset.datasetUri'), primary_key=True)


class DatasetLock(Base):
    __tablename__ = 'dataset_lock'
    datasetUri = Column(String, nullable=False, primary_key=True)
    isLocked = Column(Boolean, default=False, nullable=False)
    acquiredBy = Column(String, nullable=True)

    @classmethod
    def uri_column(cls):
        return cls.datasetUri


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    ## drop dataset_lock table
    op.drop_table('dataset_lock')

    ## create resource_lock table
    op.create_table(
        'resource_lock',
        sa.Column('resourceUri', sa.String(), nullable=False, primary_key=True),
        sa.Column('resourceType', sa.String(), nullable=False, primary_key=True),
        sa.Column('acquiredByUri', sa.String(), nullable=True),
        sa.Column('acquiredByType', sa.String(), nullable=True),
    )
    # ### end Alembic commands ###


def downgrade():
    # Drop resource_lock table
    op.drop_table('resource_lock')

    bind = op.get_bind()
    session = orm.Session(bind=bind)
    datasets: List[S3Dataset] = session.query(S3Dataset).all()

    print('Creating dataset_lock table')

    op.create_table(
        'dataset_lock',
        sa.Column('datasetUri', sa.String(), primary_key=True),
        sa.Column('isLocked', sa.Boolean(), nullable=False),
        sa.Column('acquiredBy', sa.String(), nullable=True),
    )

    op.create_foreign_key(
        'fk_dataset_lock_datasetUri',  # Constraint name
        'dataset_lock',
        'dataset',
        ['datasetUri'],
        ['datasetUri'],
    )

    print('Creating a new row for each existing dataset in dataset_lock table')
    for dataset in datasets:
        dataset_lock = DatasetLock(datasetUri=dataset.datasetUri, isLocked=False, acquiredBy='')
        session.add(dataset_lock)
    session.flush()  # flush to get the datasetUri
    session.commit()
    # ### end Alembic commands ###
