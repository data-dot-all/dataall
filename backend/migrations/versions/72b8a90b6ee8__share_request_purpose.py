"""_share_request_purpose

Revision ID: 72b8a90b6ee8
Revises: 509997f0a51e
Create Date: 2023-06-05 12:28:56.221364

"""

from alembic import op
from sqlalchemy import orm, Column, String, Boolean, DateTime
from sqlalchemy.ext.declarative import declarative_base

from dataall.base.db import utils
from datetime import datetime

from dataall.core.environment.services.environment_service import EnvironmentService
from dataall.core.permissions.services.resource_policy_service import ResourcePolicyService
from dataall.modules.shares_base.services.share_permissions import SHARE_OBJECT_APPROVER, SHARE_OBJECT_REQUESTER
from dataall.modules.s3_datasets.db.dataset_repositories import DatasetRepository
from dataall.modules.shares_base.services.shares_enums import ShareObjectStatus

# revision identifiers, used by Alembic.
revision = '72b8a90b6ee8'
down_revision = '509997f0a51e'
branch_labels = None
depends_on = None

Base = declarative_base()


class ShareObject(Base):
    __tablename__ = 'share_object'
    shareUri = Column(String, nullable=False, primary_key=True, default=utils.uuid('share'))
    datasetUri = Column(String, nullable=False)
    environmentUri = Column(String)
    groupUri = Column(String)
    principalIAMRoleName = Column(String, nullable=True)
    principalId = Column(String, nullable=True)
    principalType = Column(String, nullable=True, default='Group')
    status = Column(String, nullable=False, default=ShareObjectStatus.Draft.value)
    owner = Column(String, nullable=False)
    created = Column(DateTime, default=datetime.now)
    updated = Column(DateTime, onupdate=datetime.now)
    deleted = Column(DateTime)
    confirmed = Column(Boolean, default=False)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('share_object', Column('requestPurpose', String(), nullable=True))
    op.add_column('share_object', Column('rejectPurpose', String(), nullable=True))

    # ### Fix Permissions Set for Share Object Approvers + Requesters
    try:
        bind = op.get_bind()
        session = orm.Session(bind=bind)

        print('Getting all Share Objects...')
        shares: [ShareObject] = session.query(ShareObject).all()
        for share in shares:
            dataset = DatasetRepository.get_dataset_by_uri(session, share.datasetUri)
            environment = EnvironmentService.get_environment_by_uri(session, share.environmentUri)

            # Env Admins
            # Delete Share Object Permissions on Share Env Admin if Not Share Requester Group
            if share.groupUri != environment.SamlGroupName:
                ResourcePolicyService.delete_resource_policy(
                    session=session,
                    group=environment.SamlGroupName,
                    resource_uri=share.shareUri,
                )
                print(
                    f'Delete SHARE_OBJECT Permissions for Env Owner {environment.SamlGroupName} on Share {share.shareUri}'
                )

            # Dataset Admins
            # Delete and Recreate Dataset Share Object Permissions to be Share Object Approver Permission Set
            ResourcePolicyService.delete_resource_policy(
                session=session,
                group=dataset.SamlAdminGroupName,
                resource_uri=share.shareUri,
            )
            ResourcePolicyService.attach_resource_policy(
                session=session,
                group=dataset.SamlAdminGroupName,
                permissions=SHARE_OBJECT_APPROVER,
                resource_uri=share.shareUri,
                resource_type=ShareObject.__name__,
            )
            print(
                f'Recreated SHARE_OBJECT_APPROVER Permissions for Dataset Owner {dataset.SamlAdminGroupName} on Share {share.shareUri}'
            )

            # Dataset Stewards
            # Delete and Recreate Dataset Share Object Permissions to be Share Object Approver Permission Set
            if dataset.SamlAdminGroupName != dataset.stewards:
                ResourcePolicyService.delete_resource_policy(
                    session=session,
                    group=dataset.stewards,
                    resource_uri=share.shareUri,
                )
                ResourcePolicyService.attach_resource_policy(
                    session=session,
                    group=dataset.stewards,
                    permissions=SHARE_OBJECT_APPROVER,
                    resource_uri=share.shareUri,
                    resource_type=ShareObject.__name__,
                )
                print(
                    f'Recreated SHARE_OBJECT_APPROVER Permissions for Dataset Steward {dataset.stewards} on Share {share.shareUri}'
                )

    except Exception as e:
        print(e)
        print(f'Failed to update share object approver permissions due to: {e}')
        raise e
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        bind = op.get_bind()
        session = orm.Session(bind=bind)

        print('Getting all Share Objects...')
        shares: [ShareObject] = session.query(ShareObject).all()
        for share in shares:
            dataset = DatasetRepository.get_dataset_by_uri(session, share.datasetUri)
            environment = EnvironmentService.get_environment_by_uri(session, share.environmentUri)

            # Env Admins
            # Add SHARE_OBJECT_REQUESTER to Env Admin Group
            ResourcePolicyService.attach_resource_policy(
                session=session,
                group=environment.SamlGroupName,
                permissions=SHARE_OBJECT_REQUESTER,
                resource_uri=share.shareUri,
                resource_type=ShareObject.__name__,
            )
            print(
                f'Adding SHARE_OBJECT_REQUESTER Permissions for Share Env Admin {environment.SamlGroupName} on Share {share.shareUri}'
            )

            # Dataset Admins
            # Remove SHARE_OBJECT_APPROVER Permissions if Exists Separate from Stewards(i.e. if steward != owner)
            # Add SHARE_OBJECT_REQUESTER Permissions to Dataset Admin Group
            if dataset.SamlAdminGroupName != dataset.stewards:
                ResourcePolicyService.delete_resource_policy(
                    session=session,
                    group=dataset.SamlAdminGroupName,
                    resource_uri=share.shareUri,
                )
            ResourcePolicyService.attach_resource_policy(
                session=session,
                group=dataset.SamlAdminGroupName,
                permissions=SHARE_OBJECT_REQUESTER,
                resource_uri=share.shareUri,
                resource_type=ShareObject.__name__,
            )
            print(
                f'Adding SHARE_OBJECT_REQUESTER Permissions for Dataset Owner {dataset.SamlAdminGroupName} on Share {share.shareUri}'
            )
    except Exception as e:
        print(e)
        print(f'Failed to update share object approver permissions due to: {e}')
        raise e

    op.drop_column('share_object', 'requestPurpose')
    op.drop_column('share_object', 'rejectPurpose')
    # ### end Alembic commands ###
